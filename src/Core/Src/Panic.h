/*!
    Multiverse Engine Project 5/5/2011 Core Panic.h
    This header contains Error Handler functions.
    
    Copyright (C) 2014 Multiverse Engine Project

    This program is free software;
    you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; 
    either version 2 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
    See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with this program; 
    if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
      
    Official source repository and project information can be found at
    https://github.com/codebase7/mengine
*/

#ifndef PANIC_H
#define PANIC_H

#include "BaseHeader.h"

// Define version and compile date time.
#ifndef PANIC_HANDLER_VERSION
#define PANIC_HANDLER_VERSION "0.0.1 Alpha\0"
#endif

#ifndef PANIC_HANDLER_COMPILEDATE
#define PANIC_HANDLER_COMPILEDATE   __DATE__
#endif

#ifndef PANIC_HANDLER_COMPILETIME
#define PANIC_HANDLER_COMPILETIME   __TIME__
#endif

// Module ERROR IDs
#define CORE_ID 1
#define COMMON_ID 2
#define GAME_ID 7
#define OPENGL_ID 8
#define PORT_AUDIO_ID 9
#define ERROR_ID 10

#include "Panic_Error_Levels.h"		// Defines the error / log levels.

namespace Panic{
  class ERROR {

  private:
        std::string PreviousErrors[5];		// Used to contain older errors.
        std::string LastError;			// Contains the last error thrown.
        std::string pathToLogFile;		// Contains path to the log file.
        unsigned int logLevel;			// Determines when to write to the log file.
        unsigned int maxLogLines;		// Determines when the log file will start being overwritten.
        unsigned int currentLogLine;		// Contains the current Log line.
        fstream logfile;			// File handler for the log file.
        bool logfile_enabled;			// Used to tell if we are writing to a log file or not.

        /*
            Disable the copy constructor and assignment operator.

            This class has an open file descriptor for use with the logging functions.
            We don't want the descriptor copied.
        */
        // Copy Constructor.
        ERROR(const ERROR &source);

        // Assignment Operator.
        ERROR & operator= (const ERROR & source);

  public:
        // Initalizer
        ERROR()
        {
                LastError = "";
                pathToLogFile = "";
                logLevel = ERROR_DISABLE;
                maxLogLines = 0;
                currentLogLine = 0;
                logfile_enabled = false;
        }

        // Destructor.
        ~ERROR()
        {
                // If the file is still open, flush it and close it.
                if (this->logfile.is_open() == true)
                {
                        this->logfile.flush();
                        this->logfile.close();
                }
        }

        /*!
            ReturnLastError() const

            Gives a string containing the last error generated by a call to PanicHandler()
            Returns Last error generated by a call to PanicHandler() if no error has occured a "No Error" is given.
        */
        std::string ReturnLastError() const;

        /*!
            PanicHandler(const std::string & message, const int & moduleID, const int & log_level, const bool & killengine)

            Prints an error message to the user and logs it if applicable.
            message message to give user.
            moduleID id of module calling the error. Defaults to "unknown".
            log_level severity of the error.
            killengine if true will halt the engine. Default false.
            returns "OK" if successful. otherwise you should probaly shutdown the engine.
        */
        std::string PanicHandler(const std::string & message, const int & moduleID = 0, const unsigned int & log_level = ERROR_CRITICAL, const bool & killengine = false);

        /*!
            enable_logging(const std::string & path_to_logfile, const unsigned int & log_level, const unsigned int & max_lines)

            This function enables writing the log to a file.

            path_to_logfile path to the file where the log will be written. Note: this
            file if it exists, will be over written.

            log_level determines when the file on disk will be updated. (If the
            log_level is higher than the error then it is not logged.)

            max_lines determines how many line will be written to the log before it is
            overwritten. -1 disables this limit.

            Returns 0 on success.
            Returns -1 if logging is already enabled.
            Returns -5 if a invalid pramater is passed.
            Returns -9 if the log file can't be opened.
        */
        short enable_logging(const std::string & path_to_logfile, const unsigned int & log_level, const unsigned int & max_lines);

        /*!
            disable_logging()

            This function disables the log from being written to a file.
        */
        void disable_logging();

        /*!
            change_log_level(const unsigned int & log_level)

            Changes the log file level.

            log_level must be greater than ERROR_DISABLE, and a log file must already be open
            for this function to work.
        */
        void change_log_level(const unsigned int & log_level)
        {
                if (log_level <= ERROR_DISABLE)
                {
                        // Nothing to do.
                        return;
                }
                else
                {
                        if (this->logfile_enabled == true)
                        {
                                this->logLevel = log_level;
                        }
                }
        }
        
        /*!
                int Panic::ERROR::get_log_level() const

                Returns the currently configured log level.
        */
        unsigned int get_log_level() const;

        /*!
                bool Panic::ERROR::is_logging_enabled() const

                Returns whether or not the logging function is enabled.

                Returns true if logging is enabled.
                Returns false otherwise.
        */
        bool is_logging_enabled() const;

        /*!
                std::string Panic::ERROR::get_log_file_path() const

                Returns the configured log file path.

                If no path is configured, a blank string object is returned.
        */
        std::string get_log_file_path() const;

        /*!
                unsigned int Panic::ERROR::get_max_log_lines() const

                Returns the maximum number of lines allowed in a log
                file before the oldest lines will be overwritten.
        */
        unsigned int get_max_log_lines() const;

        /*!
                unsigned int Panic::ERROR::get_current_log_line() const

                Returns the current line number in the log file where
                an error will be written to.
        */
        unsigned int get_current_log_line() const;
  };
    /*!
            void Panic::FileStream_Status(Panic::ERROR & error, fstream & stream, const unsigned int & log_level)

            Gets the status for a given file stream, and outputs that status to the given error handler with the given log_level.
    */
    void FileStream_Status(Panic::ERROR & error, fstream & stream, const unsigned int & log_level);
    
    /*!
            const char * Panic::Get_Library_Version()

            Returns a const char pointer to the library version.
    */
    const char * Get_Library_Version();

    /*!
            const char * Panic::Get_Library_Compile_Date()

            Returns a const char pointer to the library compile date.
    */
    const char * Get_Library_Compile_Date();

    /*!
            const char * Panic::Get_Library_Compile_Time()

            Returns a const char pointer to the library compile time.
    */
    const char * Get_Library_Compile_Time();
}

#endif

// End of Panic.h
